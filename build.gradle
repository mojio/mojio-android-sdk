// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: 'jacoco'
ext {
    // forced to use 0.7.2 due to https://github.com/jacoco/jacoco/pull/288
    // should be able to update after Gradle 2.13 (https://github.com/gradle/gradle/pull/575) using
    // includeNoLocationClasses = true
    JACOCO_VERSION = "0.7.2.201409121644"
    BUILD_TOOLS_VERSION = '23.0.2'
    COMPILE_SDK_VERSION = 23
    TARGET_SDK_VERSION = 23
    MIN_SDK_VERSION = 7
    VERSION_CODE = 1

    PUBLISH_GROUP_ID = 'io.moj.mobile.android'
    PUBLISH_VERSION = '0.0.16'
    GLOBAL_COVERAGE_EXCLUDES = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/io/moj/mobile/android/sdk/test/**'
    ]
}

jacoco {
    toolVersion = JACOCO_VERSION
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.0.0-beta6'
        classpath "org.jacoco:org.jacoco.core:0.7.2.201409121644"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()

        // we distribute to JCenter but this repo is updated faster
        maven {
            url 'https://dl.bintray.com/mojio/maven'
        }
    }
}

task clean(type: Delete, group: 'Root') {
    description = "Deletes the root build directory."
    delete rootProject.buildDir
}

/* Jacoco Unit Test Coverage */
def jacocoModuleTask = "testDebugUnitTest"

task jacocoMerge(type: JacocoMerge, group: 'Reporting') {
    description = "Merges Jacoco reports from all subprojects"

    project.subprojects.each {
        dependsOn("${it.path}:${jacocoModuleTask}")
    }

    executionData = files()
    doFirst {
        def executionFiles = []
        project.subprojects.each {
            def file = file("${it.buildDir}/jacoco/${jacocoModuleTask}.exec")
            if (file.exists())
                executionFiles += file.absolutePath
        }
        executionData = files(executionFiles)
    }

    destinationFile = file("${buildDir}/jacoco/jacocoMerge.exec")
}

task reportUnitTestCoverage(type: JacocoReport, group: 'Reporting') {
    description = "Generates a unified Jacoco coverage report for all modules"
    dependsOn jacocoMerge

    def classDirs = fileTree(dir: "${buildDir}/classes/debug", excludes: GLOBAL_COVERAGE_EXCLUDES)
    def sourceDirs = []
    project.subprojects.each {
        classDirs = classDirs.plus(fileTree(dir: "${it.buildDir}/intermediates/classes/debug", excludes: GLOBAL_COVERAGE_EXCLUDES))
        sourceDirs += "${it.projectDir}/src/main/java"
    }

    executionData = files(jacocoMerge.destinationFile)
    classDirectories = classDirs
    sourceDirectories = files(sourceDirs)
    additionalSourceDirs = files(sourceDirs)

    reports {
        xml.enabled = true
        html.enabled = true
    }
}